# Apache License
# Version 2.0, January 2004
# http://www.apache.org/licenses/

# Copyright 2025 emanoyhl and emanoyhl.net find me at github.com/emanoyhl 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import requests
from bs4 import BeautifulSoup

class VulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url

    def scan_sql_injection(self):
        """Scan for SQL Injection vulnerabilities using common payloads."""
        payloads = ["' OR '1'='1", "' OR 'x'='x", "' OR 1=1 --"]
        for payload in payloads:
            response = requests.get(self.target_url + payload)
            if "error" not in response.text.lower():
                print(f"Potential SQL Injection vulnerability found with payload: {payload}")

    def scan_xss(self):
        """Scan for XSS vulnerabilities using common payloads."""
        payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]
        for payload in payloads:
            response = requests.get(self.target_url + payload)
            if payload in response.text:
                print(f"Potential XSS vulnerability found with payload: {payload}")

    def run(self):
        """Execute the scanning process for SQL Injection and XSS vulnerabilities."""
        print(f"Scanning {self.target_url} for vulnerabilities...")
        self.scan_sql_injection()
        self.scan_xss()
        print("Scan complete. No vulnerabilities found, or this scan is too basic")

if __name__ == "__main__":
    # Input the target URL or localhost with an optional port.
    target = input("Enter the URL to scan (e.g., http://localhost:8000 or http://127.0.0.1): ")
    # Ensure the URL ends with a slash if not specified.
    if not target.endswith('/'):
        target += '/'
    scanner = VulnerabilityScanner(target)
    scanner.run()